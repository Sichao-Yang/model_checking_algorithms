Lights out (satisfiable)
    Each step in the program represents a move of inverting a bit and its neighboring bits.
    For it to be unsolvable, neighboring bits must include wrapping around.
    Returning SAT means there is no solution to the starting conditions resulting in turning off all the bits.
---------------------------------------
Init: And(v0, v1, v2, v5, v6, v7, v8, Not(v3), Not(v4))
Trans: Or(And(v0_prime == Not(v0),
       v1_prime == Not(v1),
       v2_prime == v2,
       v3_prime == v3,
       v4_prime == v4,
       v5_prime == v5,
       v6_prime == v6,
       v7_prime == v7,
       v8_prime == Not(v8)),
   And(v0_prime == Not(v0),
       v1_prime == Not(v1),
       v2_prime == Not(v2),
       v3_prime == v3,
       v4_prime == v4,
       v5_prime == v5,
       v6_prime == v6,
       v7_prime == v7,
       v8_prime == v8),
   And(v0_prime == v0,
       v1_prime == Not(v1),
       v2_prime == Not(v2),
       v3_prime == Not(v3),
       v4_prime == v4,
       v5_prime == v5,
       v6_prime == v6,
       v7_prime == v7,
       v8_prime == v8),
   And(v0_prime == v0,
       v1_prime == v1,
       v2_prime == Not(v2),
       v3_prime == Not(v3),
       v4_prime == Not(v4),
       v5_prime == v5,
       v6_prime == v6,
       v7_prime == v7,
       v8_prime == v8),
   And(v0_prime == v0,
       v1_prime == v1,
       v2_prime == v2,
       v3_prime == Not(v3),
       v4_prime == Not(v4),
       v5_prime == Not(v5),
       v6_prime == v6,
       v7_prime == v7,
       v8_prime == v8),
   And(v0_prime == v0,
       v1_prime == v1,
       v2_prime == v2,
       v3_prime == v3,
       v4_prime == Not(v4),
       v5_prime == Not(v5),
       v6_prime == Not(v6),
       v7_prime == v7,
       v8_prime == v8),
   And(v0_prime == v0,
       v1_prime == v1,
       v2_prime == v2,
       v3_prime == v3,
       v4_prime == v4,
       v5_prime == Not(v5),
       v6_prime == Not(v6),
       v7_prime == Not(v7),
       v8_prime == v8),
   And(v0_prime == v0,
       v1_prime == v1,
       v2_prime == v2,
       v3_prime == v3,
       v4_prime == v4,
       v5_prime == v5,
       v6_prime == Not(v6),
       v7_prime == Not(v7),
       v8_prime == Not(v8)),
   And(v0_prime == Not(v0),
       v1_prime == v1,
       v2_prime == v2,
       v3_prime == v3,
       v4_prime == v4,
       v5_prime == v5,
       v6_prime == v6,
       v7_prime == Not(v7),
       v8_prime == Not(v8)))
Post:Or(v0, v1, v2, v3, v4, v5, v6, v7, v8)
